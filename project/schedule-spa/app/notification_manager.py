"""
–ú–æ–¥—É–ª—å —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è Telegram Mini App
–ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç—Å—è —Å Telegram Bot API –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
"""

import requests
import json
import sqlite3
from datetime import datetime, timedelta
from typing import List, Dict, Optional, Any
from enum import Enum
from dataclasses import dataclass, asdict
from contextlib import contextmanager
from pathlib import Path

from .auth import TelegramUser, UserRole
from .database import DatabaseManager


class NotificationType(Enum):
    """–¢–∏–ø—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    HOMEWORK_ASSIGNED = "homework_assigned"
    HOMEWORK_UPDATED = "homework_updated" 
    HOMEWORK_DELETED = "homework_deleted"
    SCHEDULE_CHANGED = "schedule_changed"
    NEW_GROUP_MEMBER = "new_group_member"
    ROLE_CHANGED = "role_changed"
    SYSTEM_ANNOUNCEMENT = "system_announcement"
    REMINDER = "reminder"


@dataclass
class NotificationSettings:
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id: int
    notifications_enabled: bool = True
    homework_notifications: bool = True
    schedule_notifications: bool = True
    group_notifications: bool = True
    system_notifications: bool = True
    reminder_notifications: bool = True
    quiet_hours_start: Optional[str] = None  # "22:00"
    quiet_hours_end: Optional[str] = None    # "08:00"
    language: str = "ru"


@dataclass
class Notification:
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"""
    id: Optional[int] = None
    user_id: int = 0
    type: NotificationType = NotificationType.SYSTEM_ANNOUNCEMENT
    title: str = ""
    message: str = ""
    data: Dict[str, Any] = None
    sent: bool = False
    created_at: Optional[str] = None
    sent_at: Optional[str] = None
    
    def __post_init__(self):
        if self.data is None:
            self.data = {}
        if self.created_at is None:
            self.created_at = datetime.now().isoformat()


class TelegramNotificationService:
    """–°–µ—Ä–≤–∏—Å –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —á–µ—Ä–µ–∑ Telegram Bot API"""
    
    def __init__(self, bot_token: str):
        self.bot_token = bot_token
        self.base_url = f"https://api.telegram.org/bot{bot_token}"
    
    async def send_notification(self, chat_id: int, notification: Notification) -> bool:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        try:
            message = self._format_notification_message(notification)
            
            url = f"{self.base_url}/sendMessage"
            data = {
                "chat_id": chat_id,
                "text": message,
                "parse_mode": "Markdown",
                "disable_web_page_preview": True
            }
            
            response = requests.post(url, json=data)
            result = response.json()
            
            if result.get("ok"):
                print(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}: {notification.title}")
                return True
            else:
                print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {result.get('description')}")
                return False
                
        except Exception as e:
            print(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
            return False
    
    def _format_notification_message(self, notification: Notification) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        icons = {
            NotificationType.HOMEWORK_ASSIGNED: "üìù",
            NotificationType.HOMEWORK_UPDATED: "‚úèÔ∏è",
            NotificationType.HOMEWORK_DELETED: "üóëÔ∏è",
            NotificationType.SCHEDULE_CHANGED: "üìÖ",
            NotificationType.NEW_GROUP_MEMBER: "üë•",
            NotificationType.ROLE_CHANGED: "üîÑ",
            NotificationType.SYSTEM_ANNOUNCEMENT: "üì¢",
            NotificationType.REMINDER: "‚è∞"
        }
        
        icon = icons.get(notification.type, "üì¢")
        
        message = f"{icon} *{notification.title}*\n\n"
        message += f"{notification.message}\n\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –µ—Å—Ç—å
        if notification.data:
            if 'group_name' in notification.data:
                message += f"üë• *–ì—Ä—É–ø–ø–∞:* {notification.data['group_name']}\n"
            if 'lesson_name' in notification.data:
                message += f"üìö *–ü—Ä–µ–¥–º–µ—Ç:* {notification.data['lesson_name']}\n"
            if 'homework_text' in notification.data:
                homework_preview = notification.data['homework_text'][:100]
                if len(notification.data['homework_text']) > 100:
                    homework_preview += "..."
                message += f"üìã *–ó–∞–¥–∞–Ω–∏–µ:* {homework_preview}\n"
            if 'created_by' in notification.data:
                message += f"üë§ *–û—Ç:* {notification.data['created_by']}\n"
        
        message += f"\nüïê {datetime.now().strftime('%H:%M, %d.%m.%Y')}"
        
        return message
    
    async def send_broadcast_notification(self, user_ids: List[int], notification: Notification) -> Dict[int, bool]:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –º–∞—Å—Å–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        results = {}
        
        for user_id in user_ids:
            # –ü–æ–ª—É—á–∞–µ–º chat_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            chat_id = await self._get_user_chat_id(user_id)
            if chat_id:
                results[user_id] = await self.send_notification(chat_id, notification)
            else:
                results[user_id] = False
                print(f"Chat ID –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        return results
    
    async def _get_user_chat_id(self, user_id: int) -> Optional[int]:
        """–ü–æ–ª—É—á–∞–µ—Ç chat_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Telegram –¥–∞–Ω–Ω—ã—Ö"""
        # –í Telegram Bot API chat_id –æ–±—ã—á–Ω–æ —Ä–∞–≤–µ–Ω user_id –¥–ª—è –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö —á–∞—Ç–æ–≤
        return user_id


class NotificationManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    
    def __init__(self, db_manager: DatabaseManager, bot_token: str):
        self.db_manager = db_manager
        self.tg_service = TelegramNotificationService(bot_token)
        self._init_notification_tables()
    
    def _init_notification_tables(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        try:
            with self.db_manager.get_connection() as conn:
                # –¢–∞–±–ª–∏—Ü–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                conn.execute("""
                    CREATE TABLE IF NOT EXISTS notification_settings (
                        user_id INTEGER PRIMARY KEY,
                        notifications_enabled BOOLEAN DEFAULT 1,
                        homework_notifications BOOLEAN DEFAULT 1,
                        schedule_notifications BOOLEAN DEFAULT 1,
                        group_notifications BOOLEAN DEFAULT 1,
                        system_notifications BOOLEAN DEFAULT 1,
                        reminder_notifications BOOLEAN DEFAULT 1,
                        quiet_hours_start TEXT,
                        quiet_hours_end TEXT,
                        language TEXT DEFAULT 'ru',
                        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                        FOREIGN KEY (user_id) REFERENCES users(telegram_id)
                    )
                """)
                
                # –¢–∞–±–ª–∏—Ü–∞ –∏—Å—Ç–æ—Ä–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
                conn.execute("""
                    CREATE TABLE IF NOT EXISTS notifications (
                        id INTEGER PRIMARY KEY AUTOINCREMENT,
                        user_id INTEGER NOT NULL,
                        type TEXT NOT NULL,
                        title TEXT NOT NULL,
                        message TEXT NOT NULL,
                        data TEXT,  -- JSON –¥–∞–Ω–Ω—ã–µ
                        sent BOOLEAN DEFAULT 0,
                        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                        sent_at TIMESTAMP,
                        FOREIGN KEY (user_id) REFERENCES users(telegram_id)
                    )
                """)
                
                # –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
                conn.execute("CREATE INDEX IF NOT EXISTS idx_notifications_user_id ON notifications(user_id)")
                conn.execute("CREATE INDEX IF NOT EXISTS idx_notifications_type ON notifications(type)")
                conn.execute("CREATE INDEX IF NOT EXISTS idx_notifications_sent ON notifications(sent)")
                conn.execute("CREATE INDEX IF NOT EXISTS idx_notifications_created_at ON notifications(created_at)")
                
                conn.commit()
                print("–¢–∞–±–ª–∏—Ü—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
                
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–∞–±–ª–∏—Ü —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
    
    def get_notification_settings(self, user_id: int) -> NotificationSettings:
        """–ü–æ–ª—É—á–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            with self.db_manager.get_connection() as conn:
                row = conn.execute(
                    "SELECT * FROM notification_settings WHERE user_id = ?",
                    (user_id,)
                ).fetchone()
                
                if row:
                    return NotificationSettings(
                        user_id=row['user_id'],
                        notifications_enabled=bool(row['notifications_enabled']),
                        homework_notifications=bool(row['homework_notifications']),
                        schedule_notifications=bool(row['schedule_notifications']),
                        group_notifications=bool(row['group_notifications']),
                        system_notifications=bool(row['system_notifications']),
                        reminder_notifications=bool(row['reminder_notifications']),
                        quiet_hours_start=row['quiet_hours_start'],
                        quiet_hours_end=row['quiet_hours_end'],
                        language=row['language']
                    )
                else:
                    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                    return NotificationSettings(user_id=user_id)
                    
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
            return NotificationSettings(user_id=user_id)
    
    def update_notification_settings(self, settings: NotificationSettings) -> bool:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            with self.db_manager.get_connection() as conn:
                conn.execute("""
                    INSERT OR REPLACE INTO notification_settings (
                        user_id, notifications_enabled, homework_notifications,
                        schedule_notifications, group_notifications, system_notifications,
                        reminder_notifications, quiet_hours_start, quiet_hours_end,
                        language, updated_at
                    ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                """, (
                    settings.user_id,                     settings.notifications_enabled,
                    settings.homework_notifications, settings.schedule_notifications,
                    settings.group_notifications, settings.system_notifications,
                    settings.reminder_notifications, settings.quiet_hours_start,
                    settings.quiet_hours_end, settings.language,
                    datetime.now().isoformat()
                ))
                conn.commit()
                return True
                
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
            return False
    
    async def should_send_notification(self, user_id: int, notification_type: NotificationType) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        settings = self.get_notification_settings(user_id)
        
        # –û–±—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–∫–ª—é—á–µ–Ω–Ω–æ—Å—Ç–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        if not settings.notifications_enabled:
            return False
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        notification_type_map = {
            NotificationType.HOMEWORK_ASSIGNED: settings.homework_notifications,
            NotificationType.HOMEWORK_UPDATED: settings.homework_notifications,
            NotificationType.HOMEWORK_DELETED: settings.homework_notifications,
            NotificationType.SCHEDULE_CHANGED: settings.schedule_notifications,
            NotificationType.NEW_GROUP_MEMBER: settings.group_notifications,
            NotificationType.ROLE_CHANGED: settings.group_notifications,
            NotificationType.SYSTEM_ANNOUNCEMENT: settings.system_notifications,
            NotificationType.REMINDER: settings.reminder_notifications
        }
        
        if not notification_type_map.get(notification_type, True):
            return False
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ —Ç–∏—à–∏–Ω—ã
        if settings.quiet_hours_start and settings.quiet_hours_end:
            current_time = datetime.now().time()
            start_time = datetime.strptime(settings.quiet_hours_start, "%H:%M").time()
            end_time = datetime.strptime(settings.quiet_hours_end, "%H:%M").time()
            
            if start_time <= end_time:
                # –û–±—ã—á–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 22:00-08:00)
                if start_time <= current_time <= end_time:
                    return False
            else:
                # –ü–µ—Ä–µ—Ö–æ–¥—è—â–µ–µ –≤—Ä–µ–º—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, 22:00-08:00 —á–µ—Ä–µ–∑ –ø–æ–ª–Ω–æ—á—å)
                if current_time >= start_time or current_time <= end_time:
                    return False
        
        return True
    
    async def send_notification(self, user_id: int, notification: Notification) -> bool:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        if not await self.should_send_notification(user_id, notification.type):
            print(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} (–Ω–∞—Å—Ç—Ä–æ–π–∫–∏)")
            return False
        
        try:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            with self.db_manager.get_connection() as conn:
                conn.execute("""
                    INSERT INTO notifications (
                        user_id, type, title, message, data, sent, created_at
                    ) VALUES (?, ?, ?, ?, ?, ?, ?)
                """, (
                    user_id, notification.type.value, notification.title,
                    notification.message, json.dumps(notification.data),
                    False, notification.created_at
                ))
                
                notification_id = conn.lastrowid
                conn.commit()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ Telegram
            success = await self.tg_service.send_notification(user_id, notification)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–ø—Ä–∞–≤–∫–∏
            if success:
                with self.db_manager.get_connection() as conn:
                    conn.execute("""
                        UPDATE notifications 
                        SET sent = 1, sent_at = ?
                        WHERE id = ?
                    """, (datetime.now().isoformat(), notification_id))
                    conn.commit()
            
            return success
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
            return False
    
    async def send_group_notification(self, group_id: str, notification: Notification, 
                                    exclude_user_id: Optional[int] = None) -> Dict[int, bool]:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –≥—Ä—É–ø–ø—ã"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥—Ä—É–ø–ø—ã
            group_members = self.db_manager.get_group_members(group_id)
            user_ids = [member.id for member in group_members]
            
            # –ò—Å–∫–ª—é—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
            if exclude_user_id:
                user_ids = [uid for uid in user_ids if uid != exclude_user_id]
            
            results = {}
            for user_id in user_ids:
                results[user_id] = await self.send_notification(user_id, notification)
            
            return results
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
            return {}
    
    def get_notification_history(self, user_id: int, limit: int = 50) -> List[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            with self.db_manager.get_connection() as conn:
                rows = conn.execute("""
                    SELECT * FROM notifications 
                    WHERE user_id = ?
                    ORDER BY created_at DESC
                    LIMIT ?
                """, (user_id, limit)).fetchall()
                
                return [dict(row) for row in rows]
                
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
            return []
    
    async def notify_homework_assigned(self, lesson_id: str, lesson_name: str, 
                                     homework_text: str, group_id: str, 
                                     created_by_user: TelegramUser) -> None:
        """–£–≤–µ–¥–æ–º–ª—è–µ—Ç –≥—Ä—É–ø–ø—É –æ –Ω–æ–≤–æ–º –¥–æ–º–∞—à–Ω–µ–º –∑–∞–¥–∞–Ω–∏–∏"""
        notification = Notification(
            user_id=0,  # –ë—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ
            type=NotificationType.HOMEWORK_ASSIGNED,
            title="–ù–æ–≤–æ–µ –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ",
            message=f"–î–æ–±–∞–≤–ª–µ–Ω–æ –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É {lesson_name}",
            data={
                'lesson_id': lesson_id,
                'lesson_name': lesson_name,
                'homework_text': homework_text,
                'group_id': group_id,
                'created_by': f"{created_by_user.first_name} {created_by_user.last_name or ''}".strip()
            }
        )
        
        await self.send_group_notification(group_id, notification, exclude_user_id=created_by_user.id)
    
    async def notify_homework_updated(self, lesson_id: str, lesson_name: str, 
                                     homework_text: str, group_id: str, 
                                     updated_by_user: TelegramUser) -> None:
        """–£–≤–µ–¥–æ–º–ª—è–µ—Ç –≥—Ä—É–ø–ø—É –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è"""
        notification = Notification(
            user_id=0,
            type=NotificationType.HOMEWORK_UPDATED,
            title="–û–±–Ω–æ–≤–ª–µ–Ω–æ –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ",
            message=f"–ò–∑–º–µ–Ω–µ–Ω–æ –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É {lesson_name}",
            data={
                'lesson_id': lesson_id,
                'lesson_name': lesson_name,
                'homework_text': homework_text,
                'group_id': group_id,
                'updated_by': f"{updated_by_user.first_name} {updated_by_user.last_name or ''}".strip()
            }
        )
        
        await self.send_group_notification(group_id, notification, exclude_user_id=updated_by_user.id)
    
    async def notify_homework_deleted(self, lesson_id: str, lesson_name: str, 
                                    group_id: str, deleted_by_user: TelegramUser) -> None:
        notification = Notification(
            user_id=0,
            type=NotificationType.HOMEWORK_DELETED,
            title="–£–¥–∞–ª–µ–Ω–æ –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ",
            message=f"–£–¥–∞–ª–µ–Ω–æ –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É {lesson_name}",
            data={
                'lesson_id': lesson_id,
                'lesson_name': lesson_name,
                'group_id': group_id,  
                'deleted_by': f"{deleted_by_user.first_name} {deleted_by_user.last_name or ''}".strip()
            }
        )
        
        await self.send_group_notification(group_id, notification, exclude_user_id=deleted_by_user.id)


# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
notification_manager = None

def init_notification_manager(db_manager: DatabaseManager, bot_token: str) -> NotificationManager:
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    global notification_manager
    notification_manager = NotificationManager(db_manager, bot_token)
    return notification_manager

def get_notification_manager() -> Optional[NotificationManager]:
    """–ü–æ–ª—É—á–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    return notification_manager
