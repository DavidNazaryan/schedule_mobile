#!/usr/bin/env python3
"""
–ú–∏–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ JSON –≤ SQLite
–ê–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω –¥–ª—è Telegram Mini App
"""

import json
import sqlite3
import os
from pathlib import Path
from datetime import datetime
from typing import Dict, List, Any, Optional


class DatabaseMigrator:
    def __init__(self, json_file: str = "data/users.json", db_file: str = "data/users.db"):
        self.json_file = Path(json_file)
        self.db_file = Path(db_file)
        self.schema_file = Path("database/schema.sql")
        
    def migrate(self) -> bool:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –º–∏–≥—Ä–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö –∏–∑ JSON –≤ SQLite"""
        try:
            print("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
            if not self.json_file.exists():
                print(f"‚ùå JSON —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {self.json_file}")
                return False
                
            if not self.schema_file.exists():
                print(f"‚ùå –°—Ö–µ–º–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {self.schema_file}")
                return False
            
            # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            self.db_file.parent.mkdir(exist_ok=True)
            
            # –°–æ–∑–¥–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            self._create_database()
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ JSON
            json_data = self._load_json_data()
            if not json_data:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ JSON")
                return False
            
            # –ú–∏–≥—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            users_migrated = self._migrate_users(json_data.get('users', []))
            print(f"‚úÖ –ú–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {users_migrated}")
            
            # –ú–∏–≥—Ä–∏—Ä—É–µ–º –≥—Ä—É–ø–ø—ã
            groups_migrated = self._migrate_groups(json_data.get('groups', []))
            print(f"‚úÖ –ú–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ –≥—Ä—É–ø–ø: {groups_migrated}")
            
            # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é JSON —Ñ–∞–π–ª–∞
            self._create_backup()
            
            print("üéâ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")
            import traceback
            traceback.print_exc()
            return False
    
    def _create_database(self):
        """–°–æ–∑–¥–∞–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –ø–æ —Å—Ö–µ–º–µ"""
        print("üìä –°–æ–∑–¥–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...")
        
        with sqlite3.connect(self.db_file) as conn:
            with open(self.schema_file, 'r', encoding='utf-8') as f:
                schema_sql = f.read()
            
            conn.executescript(schema_sql)
            conn.commit()
        
        print(f"‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω–∞: {self.db_file}")
    
    def _load_json_data(self) -> Optional[Dict[str, Any]]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ JSON —Ñ–∞–π–ª–∞"""
        print("üìñ –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ JSON...")
        
        try:
            with open(self.json_file, 'r', encoding='utf-8') as f:
                data = json.load(f)
            
            print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –¥–∞–Ω–Ω—ã—Ö: {len(data.get('users', []))} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, {len(data.get('groups', []))} –≥—Ä—É–ø–ø")
            return data
            
        except json.JSONDecodeError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ JSON: {e}")
            return None
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: {e}")
            return None
    
    def _migrate_users(self, users_data: List[Dict[str, Any]]) -> int:
        """–ú–∏–≥—Ä–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ JSON –≤ SQLite"""
        print("üë• –ú–∏–≥—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
        
        migrated_count = 0
        
        with sqlite3.connect(self.db_file) as conn:
            for user_data in users_data:
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
                    if 'id' not in user_data or 'first_name' not in user_data:
                        print(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –Ω–µ–ø–æ–ª–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏: {user_data}")
                        continue
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª—å
                    role = user_data.get('role', 'student')
                    if role not in ['student', 'monitor', 'admin']:
                        print(f"‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω–∞—è —Ä–æ–ª—å {role}, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º 'student'")
                        role = 'student'
                    
                    # –í—Å—Ç–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    conn.execute("""
                        INSERT OR REPLACE INTO users (
                            telegram_id, first_name, last_name, username, 
                            photo_url, role, group_id, created_at, updated_at
                        ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
                    """, (
                        user_data['id'],
                        user_data['first_name'],
                        user_data.get('last_name'),
                        user_data.get('username'),
                        user_data.get('photo_url'),
                        role,
                        user_data.get('group_id'),
                        datetime.now().isoformat(),
                        datetime.now().isoformat()
                    ))
                    
                    migrated_count += 1
                    
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_data.get('id', 'unknown')}: {e}")
                    continue
            
            conn.commit()
        
        return migrated_count
    
    def _migrate_groups(self, groups_data: List[Dict[str, Any]]) -> int:
        """–ú–∏–≥—Ä–∏—Ä—É–µ—Ç –≥—Ä—É–ø–ø—ã –∏–∑ JSON –≤ SQLite"""
        print("üè´ –ú–∏–≥—Ä–∏—Ä—É–µ–º –≥—Ä—É–ø–ø—ã...")
        
        migrated_count = 0
        
        with sqlite3.connect(self.db_file) as conn:
            for group_data in groups_data:
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
                    if 'group_id' not in group_data or 'group_name' not in group_data:
                        print(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≥—Ä—É–ø–ø—É —Å –Ω–µ–ø–æ–ª–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏: {group_data}")
                        continue
                    
                    # –í—Å—Ç–∞–≤–ª—è–µ–º –≥—Ä—É–ø–ø—É
                    conn.execute("""
                        INSERT OR REPLACE INTO groups (
                            id, name, monitor_telegram_id, created_at
                        ) VALUES (?, ?, ?, ?)
                    """, (
                        group_data['group_id'],
                        group_data['group_name'],
                        group_data.get('monitor_user_id'),
                        datetime.now().isoformat()
                    ))
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º —Å–≤—è–∑–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –≥—Ä—É–ø–ø–∞–º–∏
                    monitor_id = group_data.get('monitor_user_id')
                    if monitor_id:
                        conn.execute("""
                            INSERT OR IGNORE INTO user_groups (user_telegram_id, group_id, joined_at)
                            VALUES (?, ?, ?)
                        """, (monitor_id, group_data['group_id'], datetime.now().isoformat()))
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –≥—Ä—É–ø–ø—ã
                    student_ids = group_data.get('student_user_ids', [])
                    for student_id in student_ids:
                        conn.execute("""
                            INSERT OR IGNORE INTO user_groups (user_telegram_id, group_id, joined_at)
                            VALUES (?, ?, ?)
                        """, (student_id, group_data['group_id'], datetime.now().isoformat()))
                    
                    migrated_count += 1
                    
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏ –≥—Ä—É–ø–ø—ã {group_data.get('group_id', 'unknown')}: {e}")
                    continue
            
            conn.commit()
        
        return migrated_count
    
    def _create_backup(self):
        """–°–æ–∑–¥–∞–µ—Ç —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é JSON —Ñ–∞–π–ª–∞"""
        backup_file = self.json_file.with_suffix('.json.backup')
        try:
            import shutil
            shutil.copy2(self.json_file, backup_file)
            print(f"üíæ –°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {backup_file}")
        except Exception as e:
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é: {e}")
    
    def verify_migration(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –º–∏–≥—Ä–∞—Ü–∏–∏"""
        print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –º–∏–≥—Ä–∞—Ü–∏–∏...")
        
        try:
            with sqlite3.connect(self.db_file) as conn:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                users_count = conn.execute("SELECT COUNT(*) FROM users").fetchone()[0]
                print(f"üìä –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ: {users_count}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥—Ä—É–ø–ø
                groups_count = conn.execute("SELECT COUNT(*) FROM groups").fetchone()[0]
                print(f"üìä –ì—Ä—É–ø–ø –≤ –±–∞–∑–µ: {groups_count}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤—è–∑–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –≥—Ä—É–ø–ø–∞–º–∏
                user_groups_count = conn.execute("SELECT COUNT(*) FROM user_groups").fetchone()[0]
                print(f"üìä –°–≤—è–∑–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å-–≥—Ä—É–ø–ø–∞: {user_groups_count}")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ä–æ–ª—è–º
                roles_stats = conn.execute("""
                    SELECT role, COUNT(*) as count 
                    FROM users 
                    GROUP BY role
                """).fetchall()
                
                print("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ä–æ–ª—è–º:")
                for role, count in roles_stats:
                    print(f"  - {role}: {count}")
                
                return True
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ: {e}")
            return False


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏"""
    print("üöÄ –ú–∏–≥—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è Telegram Mini App")
    print("=" * 60)
    
    migrator = DatabaseMigrator()
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é
    success = migrator.migrate()
    
    if success:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        migrator.verify_migration()
        
        print("\n" + "=" * 60)
        print("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        print("\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
        print("1. –û–±–Ω–æ–≤–∏—Ç–µ –∫–æ–¥ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å SQLite –≤–º–µ—Å—Ç–æ JSON")
        print("2. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É")
        print("3. –£–¥–∞–ª–∏—Ç–µ —Å—Ç–∞—Ä—ã–π JSON —Ñ–∞–π–ª –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
    else:
        print("\n" + "=" * 60)
        print("‚ùå –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–∞–º–∏!")
        print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤—ã—à–µ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º.")


if __name__ == "__main__":
    main()
